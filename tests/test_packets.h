#ifndef _NTF_TESTS_TEST_PACKETS_H_
#define _NTF_TESTS_TEST_PACKETS_H_


#include <string>


const uint8_t ETHERNET_HEADER_DATA[] = {
    // Source MAC
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
    // Dest MAC
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
    // IPv4
    0x08, 0x00
};

const uint8_t IPV4_HEADER_DATA[] = {
    // IPv4
    0x45,
    // DSCP
    0x00,
    // Length
    0x01, 0x44,
    // ID
    0x00, 0x01,
    // Flags, fragment offset
    0x00, 0x00,
    // TTL
    0x40,
    // Proto (UDP)
    0x11,
    // Checksum
    0x5d, 0x9c,
    // Source IP
    0x10, 0x00, 0x00, 0x1e,
    // Dest IP
    0x06, 0x06, 0x06, 0x06,
};

const uint8_t UDP_HEADER_DATA[] = {
    // Source port
    0x27, 0x11,
    // Dest port
    0x27, 0x12,
    // Length
    0x01, 0x30,
    // Checksum
    0xde, 0xba
};

const uint8_t STUN_PACKET_DATA[] = {
    // STUN packet header etc
    0x00, 0x01, 0x01, 0x14, 0x21, 0x12, 0xa4, 0x42, 0x35, 0x66, 0x67, 0x4b,
    0x42, 0x74, 0x78, 0x35, 0x65, 0x34, 0x78, 0x71,

    // Network Token attribute header
    0x80, 0x30, 0x00, 0xb9,

    // Network Token
    0x00, 0x00, 0xb0, 0x0f, 0x65, 0x79, 0x4a, 0x68, 0x62, 0x47, 0x63, 0x69,
    0x4f, 0x69, 0x4a, 0x6b, 0x61, 0x58, 0x49, 0x69, 0x4c, 0x43, 0x4a, 0x6c,
    0x62, 0x6d, 0x4d, 0x69, 0x4f, 0x69, 0x4a, 0x42, 0x4d, 0x54, 0x49, 0x34,
    0x51, 0x30, 0x4a, 0x44, 0x4c, 0x55, 0x68, 0x54, 0x4d, 0x6a, 0x55, 0x32,
    0x49, 0x6e, 0x30, 0x2e, 0x2e, 0x4f, 0x51, 0x48, 0x66, 0x58, 0x63, 0x5f,
    0x70, 0x4e, 0x30, 0x56, 0x55, 0x47, 0x68, 0x67, 0x42, 0x36, 0x44, 0x68,
    0x46, 0x52, 0x77, 0x2e, 0x4b, 0x58, 0x78, 0x49, 0x44, 0x32, 0x6e, 0x67,
    0x79, 0x49, 0x65, 0x4c, 0x78, 0x46, 0x41, 0x6c, 0x70, 0x4b, 0x34, 0x64,
    0x53, 0x52, 0x53, 0x79, 0x4c, 0x48, 0x53, 0x73, 0x6b, 0x49, 0x4c, 0x5a,
    0x4a, 0x76, 0x4c, 0x35, 0x61, 0x71, 0x2d, 0x6b, 0x78, 0x44, 0x6e, 0x4b,
    0x31, 0x4d, 0x6d, 0x64, 0x79, 0x52, 0x52, 0x4d, 0x66, 0x39, 0x57, 0x30,
    0x57, 0x51, 0x6e, 0x78, 0x33, 0x37, 0x61, 0x68, 0x65, 0x69, 0x56, 0x62,
    0x31, 0x31, 0x46, 0x6e, 0x4c, 0x47, 0x55, 0x70, 0x49, 0x51, 0x73, 0x6d,
    0x69, 0x54, 0x41, 0x57, 0x5a, 0x67, 0x2e, 0x50, 0x57, 0x65, 0x30, 0x39,
    0x37, 0x73, 0x5f, 0x77, 0x68, 0x53, 0x4c, 0x62, 0x4c, 0x71, 0x44, 0x30,
    0x46, 0x65, 0x7a, 0x43, 0x77,

    // Padding
    0x00, 0x00, 0x00,

    // Remaining attributes
    0x00, 0x06, 0x00, 0x13, 0x64, 0x6b, 0x76, 0x63, 0x32, 0x31, 0x65, 0x65,
    0x65, 0x63, 0x76, 0x69, 0x76, 0x33, 0x3a, 0x63, 0x50, 0x74, 0x51, 0x00,
    0xc0, 0x57, 0x00, 0x04, 0x00, 0x03, 0x00, 0x0a, 0x80, 0x29, 0x00, 0x08,
    0x6d, 0xd2, 0x8d, 0x3d, 0x57, 0x68, 0x52, 0x0a, 0x00, 0x24, 0x00, 0x04,
    0x6e, 0x7d, 0x1e, 0xff, 0x00, 0x08, 0x00, 0x14, 0x8c, 0x64, 0x03, 0xd2,
    0x31, 0xf1, 0x1d, 0x99, 0xb0, 0x56, 0x4a, 0x2c, 0x5e, 0x3e, 0x42, 0x1e,
    0x9b, 0x19, 0x4c, 0x8b, 0x80, 0x28, 0x00, 0x04, 0x29, 0xe4, 0x6f, 0x38,
};


#define PKT(__type__) \
    const std::string __type__( (const char*) __type__ ## _DATA, sizeof(__type__ ## _DATA) )

PKT( ETHERNET_HEADER );
PKT( IPV4_HEADER );
PKT( UDP_HEADER );
PKT( STUN_PACKET );


#endif // _NTF_TESTS_TEST_PACKETS_H_
