# License : Apache-2.0
# Copyright(c) 2020 Selfie Networks, Inc

src_ip = ["172.31.0.3"]

pcap_file = "/opt/ntf/pcap-samples/network-token-sample.pcap"

ntf::NTF()
ntf.table_create(dpid=1, max_entries=5)
ntf.entry_create(dpid=1, dscp=0x1a, rule_id=0xbeefb00f, token={
  'app_id': 0x10001,
  'encryption_key': '{"alg":"A128CBC-HS256","k":"Qr_XwDGctna3SlR88rEJYt6Zm100SASYeJWSJihDnsA","kty":"oct"}'
})

p_up::PcapSource(filename=pcap_file, src_ip=src_ip, reverse=False) \
   -> merge::Merge() \
   -> GenericEncap(fields=[
        {'size': 6, 'value': {'value_int': 0x000000000000}},
        {'size': 6, 'value': {'value_int': 0x000000000000}},
        {'size': 2, 'value': {'value_int': 0x0800}}
      ]) \
   -> ntf \
   -> IPChecksum() \
   -> sink::Sink()

p_down::PcapSource(filename=pcap_file, src_ip=src_ip, reverse=True) \
  -> merge

open('/tmp/uplink.pcap','w').close()
open('/tmp/downlink.pcap','w').close()
open('/tmp/sink.pcap','w').close()

bess.tcpdump_gate(True, 'test', "p_up", direction="out", fifo="/tmp/uplink.pcap")
bess.tcpdump_gate(True, 'test', "p_down", direction="out", fifo="/tmp/downlink.pcap")
bess.tcpdump_gate(True, 'test', "sink", gate=0, direction="in", fifo="/tmp/sink.pcap")
